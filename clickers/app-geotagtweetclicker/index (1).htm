<style type="text/css">
	   h1,h2,h3,h4,h5,h6 {font-family: 'Museo Slab', Arial, Helvetica, sans-serif;font-weight: normal;}
	   h1 {font-size: 24px; line-height: 26px;}
	   h2 {font-size: 18px; line-height: normal;}
	   h3 {font-size: 15px; line-height: normal;}
       #map {
           max-width: 100%;
       }
       #map img {
           max-width: none;
       }
	   input {
           max-width: 100%;
       }
       .btn {
           margin: 0 6px 0 0;
       }

       #legend{
            position:absolute;
            top: 400px;
            z-index:10000;
            border:0px;
            padding-left: 7px;
       }

       .thumbnail{
            position: relative;
            z-index: 0;
            border:0px;
        }
        .olControlMousePosition {
                color: red;
                font-weight: bold;
               padding-bottom: 5px;
        }
</style>

<div class="row">
    <!-- Success and Error Messages for the user --> 
    <!-- Question, task id, photo and action buttons for answering the question-->
    <div class="span8 offset2" style="height:50px">
        <div id="success" class="alert alert-success" style="display:none;">
        <div id="taskcompleted" class="alert alert-info" style="display:none;">
        <strong>The task has been completed!</strong> Thanks a lot!</strong>
        </div>
</div>

<div id="finish" class="alert alert-success" style="display:none;">
    <strong>Congratulations!</strong> You have participated in all available tasks!</strong>
<br/>
<div class="alert-actions">
    <a class="btn small" href="/">Go back</a>
    <a class="btn small" href="/app">or, Check other applications</a>
</div>
    </div>
    <div id="error" class="alert alert-error" style="display:none;">
<a class="close">×</a>
<strong>Error!</strong> Something went wrong, please contact the site administrators</strong>
    </div>
    <div id="oldBrowser" class="alert alert-info" style="display:none;">
<a class="close">×</a>
<p><strong>Sorry!</strong> Your web browser does not support the application.<p>
<div class="alert-actions">
    <a class="btn small" href="/app">Please, try with another application</a>
</div>
    </div>
  </div> <!-- End Success and Error Messages for the user -->
</div>

<!-- Throbber to show the progress while loading images -->
<div id="throbber"></div>




<div class="row">
    <div class="span12" style="background-color: #ffffff; border: 0px;padding-bottom: 10px;margin-top: -100px;">
         <h1><a href="/app/MM_TweetGeoClicker/">Tweet GeoClicker</a>: MicroMappers</h1>
     </div>
</div>
<div class="row skeleton">
    <div class="span12" style="margin-top: -50px;">
        <div class="row-fluid">
            <div class="span3">

                <div style="text-align:center;margin-right:120px;padding-bottom: 10px;">
                        <a class="btn btn-primary" href="../tutorial" ><i class="icon-question-sign"></i> Tutorial</a>
                </div>
                <div style=" margin-right: 4px; padding: 7px; background-color: #B2D57A; border: 1px solid #D5CECE;
    -webkit-border-radius: 4px;
    -moz-border-radius: 4px; border-radius: 4px; -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05); -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
">
                    <input type="hidden" id="task-id">
                    <p>Completed: <span id="done" class="label label-info"></span> out of
                    <span id="total" class="label label-inverse"></span> Clicks</p>
                    <p><span id="remain" class="label label-info"></span> Clicks remaining!</p>
                    <p><b>Rank : <span id="rank"></span></b></p>

                </div>


                <br/>
                <div id="controls" class="btn-group" data-toggle="buttons-checkbox">
                    <button class="btn btn-danger" onclick="submitUnknownTask()" style="width: 215px;"><i class="icon-thumbs-up"></i> No Location Information</button>
                    <br><br>
                    <button class="btn btn-success" onclick="submitTask()" style="width: 215px;"><i class="icon-thumbs-up"></i> Submit Location</button>

                </div>

            </div>
            <div class="span9">
                <div id="question">
                        <div class="well well-small" style="background-color: #F5F2F2;font-size: 16px; width: 800px;margin-bottom: 10px;color:#326CA8;border-color:#A4A4A8;border-width: 2px;">
                            <p id="tweettext" >Loading tweet...</p>
                        </div>

                        <input id="locationRef" autofocus  type="text" placeholder="Paste reference to location, place, town, etc. here and click Search -->" style="width:580px;">
                        <button id="searchBtn" onclick="search()" class="btn" style="margin-top:-10px"><i class="icon-search"></i> Search</button>


                       <div id="geocoding" style="display:block">
                            <div id="map_canvas" style="width: 820px; height: 410px;" >
                                <div id="throbber"></div>
                                <div id="legend">
                                   <a class="thumbnail" href="#thumb"  id="photo-link">
                                       <input type="image" onclick="addMarker();" id="photo" alt="tweet" src="http://i.imgur.com/YZxRqRQ.png" style="margin-left: 0px;margin-top: 15px;margin-bottom: 5px">
                                   </a>
                                </div>
                            </div>
                            <div id="coordinates">
                                <i class="icon-map-marker"></i> Approximate damage/impact location: <strong> Longitude:</strong> <span id="lon"></span>,
                                <strong>Latitude:</strong> <span id="lat"></span>
                            </div>
                        </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- UI for the task -->
   <div class="span8" style="margin-left: 620px;margin-top: -100px;" >
          <div id="searching" class="alert alert-info span2" style="display:none">
            <strong>Searching...</strong>
          </div>
          <div id="searchingDone" class="alert alert-success span2" style="display:none">
            <strong>Location found!</strong>
          </div>
          <div id="searchingError" class="alert alert-warning span2" style="display:none">
            <strong>Oops! Location not found</strong> Please add the marker yourself
          </div>
    </div>


<script src="/static/js/pybossa/pybossa.js" type="text/javascript"></script>
<script src="/static/js/throbber/throbber.js" type="text/javascript"></script>
<script src="http://www.openlayers.org/api/OpenLayers.js"></script>
<script src="http://maps.google.com/maps/api/js?v=3.6&amp;sensor=false"></script>
<script>
// Map for loading the markers and placing them
var map = null;
// Variable to geocode the points of interest: 
var geocoder;
// OpenLayers point variable to save the lon & lat
var point;
// Layer for placing the damage/impact park marker. This layer allows drag & drop
var damageLayer;
// Layer for centering the city. This layer is static and does not allow drag & drop, is just a reference.
var cityLayer;
// Draw Controls
var drawControls = {};



// This function creates the map, the layers, and sets up the map
function initialize() {
    map = new OpenLayers.Map('map_canvas', {
        controls: [
            new OpenLayers.Control.Navigation(),
            new OpenLayers.Control.PanZoom(),
            new OpenLayers.Control.LayerSwitcher(),
            new OpenLayers.Control.MousePosition({displayProjection: new OpenLayers.Projection("EPSG:4326"), prefix:"Approximate damage/impact location: "}),
            new OpenLayers.Control.ScaleLine(),
            new OpenLayers.Control.Attribution()
            ]
    });

    // Layers
    // Open Street Map (default layer)
    map.addLayer(new OpenLayers.Layer.OSM("Open Street Map"));

    // Google Maps Satellite layer
    map.addLayer(new OpenLayers.Layer.Google(
        "Google Satellite",
        {type: google.maps.MapTypeId.SATELLITE}
    ));

    // Google Maps Physical layer
    map.addLayer(new OpenLayers.Layer.Google(
        "Google Physical",
        {type: google.maps.MapTypeId.TERRAIN}
    ));

    // Icon for the City Marker
    var styleMapCity = new OpenLayers.StyleMap({
        pointRadius: 0
    });

    // Icon for the typhoon/tornado Marker 
    var styleDamage = new OpenLayers.StyleMap({
        pointRadius: 15,
        externalGraphic: 'https://lh4.googleusercontent.com/-dlzR5foZFC8/Ud43btU7S-I/AAAAAAAAH5o/ljM-MVSyPcM/s37/tweet.png'
    });

    // Layer for placing the city marker
    cityLayer = new OpenLayers.Layer.Vector("City marker", {
        styleMap: styleMapCity,
        attribution: 'Marker Icons by <a href="http://mapicons.nicolasmollet.com/">Nicolas Mollet</a>'
    });
    map.addLayer(cityLayer);

    // Layer for placing the damage/impact marker
    damageLayer = new OpenLayers.Layer.Vector("Damage/Impact Layer", {
        styleMap: styleDamage,
        attribution: 'Marker Icons by <a href="http://mapicons.nicolasmollet.com/">Nicolas Mollet</a>'
    });
    map.addLayer(damageLayer);

    // Function to allow only the addition of one damage/impact marker per tweet 
    // The function gets the feature (point) and gets its location, transforms it to the right projection
    // loads the lon and at into the HTML skeleton and disables the toolbar, so no more points can be added
    disablePoint = function(feature) { 
        if ($("#answerbtn").hasClass("disabled")) {
            $("#answerbtn").removeClass('disabled');
            $("#answerbtn").click(submitTask);
        }

        $("#lat").text(feature.geometry.y);
        var tmp = feature.geometry.clone();
        tmp.transform(
                map.getProjectionObject(), // from Spherical Mercator Projection
                new OpenLayers.Projection("EPSG:4326") // to transform from WGS 1984
        );
        $("#lon").text(tmp.x);       
        $("#lat").text(tmp.y);       
        toggleControl('point');
    }

    // Default location to load the map
    var lonLat = new OpenLayers.LonLat(-0.1279688 ,51.5077286 )
        .transform(
            new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
            new OpenLayers.Projection("EPSG:900913") // to Spherical Mercator Projection
        );

    // Enable drag & drop in the damage/impact Layer
    var drag = new OpenLayers.Control.DragFeature(damageLayer, {
        onComplete: function() {
            var damagePoint = damageLayer.features[0].geometry
            var tmp = damagePoint.clone();
            tmp.transform(
                    map.getProjectionObject(), // from Spherical Mercator Projection
                    new OpenLayers.Projection("EPSG:4326") // to transform from WGS 1984
            );
            // When the marker has been dropped, update the lon & lat of the urban park
            $("#lon").text(tmp.x);       
            $("#lat").text(tmp.y);       
        }
    
    });
    // Add the drag & drop control into the map
    map.addControl(drag);
    // Activate drag & drop
    drag.activate();

    drawControls = {
        point:      new OpenLayers.Control.DrawFeature(damageLayer, OpenLayers.Handler.Point, 
                    { 'featureAdded': disablePoint})
    }

    // Add them to the map
    for (var key in drawControls) {
        map.addControl(drawControls[key]);
    }

}

// Function to enable/disable the map drawing controls. 
// Only one can be active at a time
function toggleControl(drawControls) {
    for (key in drawControls) {
        ctrl = drawControls[key];
        ctrl.deactivate();
    }
}

function addMarker(drawControls){
   for (key in drawControls) {
        ctrl = drawControls[key];
        ctrl.activate();
    }
}
// This function will load the marker of the city, and center the map on it
function search(city) {
    if (city) {
        var place = city;
        $("#searchingError").hide();
    }
    else {
        $("#searching").show();
        $("#searchingError").hide();
        if ($('#locationRef').val()) {
            var place = $("#locationRef").val(); 
        }
        else {
            $("#searching").hide();
            alert("Please, paste the location city or country to search in the map");
            return
        }
    }

    // Geocode the place using Nominatim OSM service
    $.getJSON('http://nominatim.openstreetmap.org/search/' + place + '?format=json', function(output) {
        if (output.length >= 1) {
            //console.log("Lon: "+ output[0].lon + " Lat: " + output[0].lat);
            damageLayer.removeAllFeatures();
            //cityLayer.removeAllFeatures();
            $("#answerbtn").addClass("disabled");
            $("#answerbtn").unbind('click',submitTask);
            //console.log("Map cleaned!");
            // Create a LonLat object to load the place marker
            var lonLat = new OpenLayers.LonLat(output[0].lon, output[0].lat)
                .transform(
                    new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
                    map.getProjectionObject() // to Spherical Mercator Projection
                );
            // Set the marker position
            point = new OpenLayers.Geometry.Point(lonLat.lon, lonLat.lat);
            damageLayer.addFeatures([new OpenLayers.Feature.Vector(point)]);
            // Center the map
            map.setCenter(lonLat,5);

            // Reset the lon & lat span objects
            $("#lon").text("-");
            $("#lat").text("-");

            // Only show the messages when looking for user input
            if ($('#locationRef').val()) {
                $("#searching").hide().fadeOut();
                $("#searchingDone").show().fadeIn().delay(2000).fadeOut();
                toggleControl('point');
            }
        }
        else {
            // City not found, sorry
            // Warn the user and try with another place
            $("#searching").hide().fadeOut();
            $("#searchingError").show();
        }
    });
}

initialize();
search("Philippines");
var localtask;
// See http://stackoverflow.com/questions/37684/how-to-replace-plain-urls-with-links 
// for more details on this function
function replaceURLWithHTMLLinks(text) {
    var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    return text.replace(exp,"<a target='_blank' href='$1'>$1</a>"); 
}


function loadTask( task_id ) {
    var t = $.ajax({
        url: '/api/task/'+task_id,
        dataType: 'json'
    });
    t.done( function (task) {
        if ( !$.isEmptyObject(task) ) {
            if (task.state=='completed') {
                $('#answer').hide();
                $('#disqus_thread').hide();
                $('#taskcompleted').show();
            }
            loadUserProgress();
            $("#task-id").text(task.id);
            $("#tweettext").html('<img src="https://lh4.googleusercontent.com/-dlzR5foZFC8/Ud43btU7S-I/AAAAAAAAH5o/ljM-MVSyPcM/s37/tweet.png" width="18px"><strong> Tweet</strong> :<div style="margin-left: 85px;margin-top: -21px;">'+replaceURLWithHTMLLinks(task.info.text)+ '</div>');
            task.answer = {
                        'tweetid': task.info.tweetid,
                        'tweet': task.info.tweet,
                        'taskid': task.id,
                        'timestamp': task.info.timestamp,
                        'author': task.info.author,
                        'url': task.info.url,
                        'imgurl': task.info.imgurl,
                        'lat': task.info.lat,
                        'lon': task.info.lon,
                        'locationRef': null,
                        'loc': null

                    };
            localtask = task.answer;
        }
        else {
            $(".skeleton").hide();
            $("#progBox").hide();
            $("#finish").fadeIn();
        }
    });
}

function loadUserProgress() {
    pybossa.userProgress('MM_TweetGeoClicker').done(function(data){
        var pct = Math.round((data.done*100)/data.total);
        //$("#progress").css("width", pct.toString() +"%");
        //$("#progress").attr("title", pct.toString() + "% completed!");
        //$("#progress").tooltip({'placement': 'bottom'});
        $("#total").text(data.total);
        $("#done").text(data.done);

         var remaining = data.total - data.done;
        $("#remain").text(remaining);

                var completed = data.done;
        var rankTitle = "Volunteer";

        if(completed>10 && completed <= 29){
            rankTitle = "Red Cross Intern";
        }
        else if(completed>30 && completed <= 59){
            rankTitle = "New FEMA Recruit";
        }
        else if(completed>60 && completed <= 99){
            rankTitle = "UN Humanitarian";
        }
        else if(completed>100 && completed <= 299){
            rankTitle = "Senior UN Official";
        }
        else if(completed>300 && completed <= 499){
            rankTitle = "UN Country Director";
        }
        else if(completed>500 && completed <= 999){
            rankTitle = "Head of UN OCHA";
        }
        else if(completed>1000 ){
            rankTitle = "UN Secretary General";
        }

        $("#rank").text(rankTitle);

    });
}

// Function to submit and save the TaskRun in PyBossa

function submitUnknownTask(){
    var taskid = $("#task-id").text();
    // Get classification:

    var locationRef = null;

    if ($('#locationRef').val()) {
            localtask.locationRef = 'Unknown Location';
    }
    localtask.loc = "No Location Information";
    // Save the task
    pybossa.saveTask(taskid, localtask).done( function( data ) {
       // $("#success").fadeIn();
        window.location.pathname = "/app/MM_TweetGeoClicker/newtask";
    });
}
function submitTask() {
    // Get the task-id
    var taskid = $("#task-id").text();
    // Get classification:

    var locationRef = null;

    if ($('#locationRef').val()) {
            locationRef = $("#locationRef").val();
            localtask.locationRef = locationRef;
    }

    if (damageLayer.features.length > 0) {
        // Convert the feature location, the urban park marker position, into the GeoJSON format
        geojson = new OpenLayers.Format.GeoJSON({
            'internalProjection': map.baseLayer.projection,
            'externalProjection': new OpenLayers.Projection("EPSG:4326")
            });

        //var loc = JSON.parse(geojson.write(damageLayer.features[0]));
        var loc = JSON.parse(geojson.write(damageLayer.features));
        localtask.loc = loc;
        }
    else {
        alert("Please, we are also need the latitude and longitude coordinates. Click in the Locate in the map button and place a marker near the location of the damage");
        return
        }



    // Save the task
    pybossa.saveTask(taskid, localtask).done( function( data ) {
        // Uncoment next line for debugging purposes
        //console.log("Answer saved!");
        // FadeIn & Out the success div feedback
       // $("#success").fadeIn();
       // setTimeout(function() { $("#success").fadeOut() }, 2000);
        // Load a new task
        //pybossa.newTask("MM_TweetGeoClicker").done( function( data ){ loadData( data ) });
        window.location.pathname = "/app/MM_TweetGeoClicker/newtask";
    });
}

// Check if the user is loading directly a task or requesting a new one
var taskId = pybossa.getCurrentTaskId(window.location.pathname);

if (taskId){
    // The user is loading directly a task, so load then input data
    loadTask(taskId);
}
else {
    // The user is requesting a new task, so get a new one
    pybossa.newTask("MM_TweetGeoClicker").done( function( data ) {

        if ( !$.isEmptyObject(data.task) ) {
            window.location.pathname = "/app/MM_TweetGeoClicker/task/" + data.task.id;
        }
        else {
            $(".skeleton").hide();
            $("#progBox").hide();
            $("#finish").fadeIn();
        }
    });
}
</script>
